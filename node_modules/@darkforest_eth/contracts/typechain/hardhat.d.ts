/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";
import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "DarkForestArtifactUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestArtifactUtils__factory>;
    getContractFactory(
      name: "DarkForestCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestCore__factory>;
    getContractFactory(
      name: "DarkForestGetters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestGetters__factory>;
    getContractFactory(
      name: "DarkForestLazyUpdate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestLazyUpdate__factory>;
    getContractFactory(
      name: "DarkForestPlanet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestPlanet__factory>;
    getContractFactory(
      name: "DarkForestStorageV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestStorageV1__factory>;
    getContractFactory(
      name: "DarkForestTokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestTokens__factory>;
    getContractFactory(
      name: "DarkForestUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarkForestUtils__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;

    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "DarkForestArtifactUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestArtifactUtils>;
    getContractAt(
      name: "DarkForestCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestCore>;
    getContractAt(
      name: "DarkForestGetters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestGetters>;
    getContractAt(
      name: "DarkForestLazyUpdate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestLazyUpdate>;
    getContractAt(
      name: "DarkForestPlanet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestPlanet>;
    getContractAt(
      name: "DarkForestStorageV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestStorageV1>;
    getContractAt(
      name: "DarkForestTokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestTokens>;
    getContractAt(
      name: "DarkForestUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarkForestUtils>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
