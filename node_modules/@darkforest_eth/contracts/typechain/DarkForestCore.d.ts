/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  ethers,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
} from "ethers";
import type { TypedEvent, TypedEventFilter, TypedListener } from "./common";

interface DarkForestCoreInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_CAN_ADD_PLANETS()": FunctionFragment;
    "TARGET4_RADIUS()": FunctionFragment;
    "TOKEN_MINT_END_TIMESTAMP()": FunctionFragment;
    "WORLD_RADIUS_LOCKED()": FunctionFragment;
    "activateArtifact(uint256,uint256,uint256)": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "adminSetWorldRadius(uint256)": FunctionFragment;
    "artifactIdToPlanetId(uint256)": FunctionFragment;
    "artifactIdToVoyageId(uint256)": FunctionFragment;
    "buyHat(uint256)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "changeLocationRevealCooldown(uint256)": FunctionFragment;
    "changeTarget4RadiusConstant(uint256)": FunctionFragment;
    "checkRevealProof(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "createPlanet(tuple)": FunctionFragment;
    "deactivateArtifact(uint256)": FunctionFragment;
    "depositArtifact(uint256,uint256)": FunctionFragment;
    "findArtifact(uint256[2],uint256[2][2],uint256[2],uint256[7])": FunctionFragment;
    "gameConstants()": FunctionFragment;
    "getArtifactPointValues()": FunctionFragment;
    "getCumulativeRarities()": FunctionFragment;
    "getDefaultStats()": FunctionFragment;
    "getNPlanets()": FunctionFragment;
    "getNPlayers()": FunctionFragment;
    "getNRevealedPlanets()": FunctionFragment;
    "getPlanetArrival(uint256)": FunctionFragment;
    "getPlanetEvent(uint256,uint256)": FunctionFragment;
    "getPlanetEventsCount(uint256)": FunctionFragment;
    "getPlanetLevelThresholds()": FunctionFragment;
    "getRefreshedPlanet(uint256,uint256)": FunctionFragment;
    "getRevealCooldown()": FunctionFragment;
    "getRevealedCoords(uint256)": FunctionFragment;
    "getTypeWeights()": FunctionFragment;
    "getUpgrades()": FunctionFragment;
    "initialize(address,address,address,tuple)": FunctionFragment;
    "initializePlayer(uint256[2],uint256[2][2],uint256[2],uint256[8])": FunctionFragment;
    "move(uint256[2],uint256[2][2],uint256[2],uint256[13])": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "planetArrivals(uint256)": FunctionFragment;
    "planetArtifacts(uint256)": FunctionFragment;
    "planetDefaultStats(uint256)": FunctionFragment;
    "planetEvents(uint256)": FunctionFragment;
    "planetEventsCount()": FunctionFragment;
    "planetIds(uint256)": FunctionFragment;
    "planetLevelsCount()": FunctionFragment;
    "planets(uint256)": FunctionFragment;
    "planetsExtendedInfo(uint256)": FunctionFragment;
    "playerIds(uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "prospectPlanet(uint256)": FunctionFragment;
    "refreshPlanet(uint256)": FunctionFragment;
    "revealLocation(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "revealedCoords(uint256)": FunctionFragment;
    "revealedPlanetIds(uint256)": FunctionFragment;
    "s()": FunctionFragment;
    "setOwner(uint256,address)": FunctionFragment;
    "setTokenMintEndTime(uint256)": FunctionFragment;
    "snarkConstants()": FunctionFragment;
    "transferOwnership(uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradePlanet(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawArtifact(uint256,uint256)": FunctionFragment;
    "withdrawSilver(uint256,uint256)": FunctionFragment;
    "worldRadius()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_CAN_ADD_PLANETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET4_RADIUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WORLD_RADIUS_LOCKED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateArtifact",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetWorldRadius",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToPlanetId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToVoyageId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeLocationRevealCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTarget4RadiusConstant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRevealProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlanet",
    values: [
      {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateArtifact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositArtifact",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findArtifact",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gameConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactPointValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeRarities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNRevealedPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArrival",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEventsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetLevelThresholds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRefreshedPlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumberish;
        TOKEN_MINT_END_TIMESTAMP: BigNumberish;
        TARGET4_RADIUS: BigNumberish;
        INITIAL_WORLD_RADIUS: BigNumberish;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumberish;
        SPACETYPE_KEY: BigNumberish;
        BIOMEBASE_KEY: BigNumberish;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumberish;
        MAX_NATURAL_PLANET_LEVEL: BigNumberish;
        TIME_FACTOR_HUNDREDTHS: BigNumberish;
        PERLIN_THRESHOLD_1: BigNumberish;
        PERLIN_THRESHOLD_2: BigNumberish;
        PERLIN_THRESHOLD_3: BigNumberish;
        INIT_PERLIN_MIN: BigNumberish;
        INIT_PERLIN_MAX: BigNumberish;
        SPAWN_RIM_AREA: BigNumberish;
        BIOME_THRESHOLD_1: BigNumberish;
        BIOME_THRESHOLD_2: BigNumberish;
        PLANET_RARITY: BigNumberish;
        PLANET_TYPE_WEIGHTS: [
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planetArrivals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetArtifacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetDefaultStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEventsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetLevelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsExtendedInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prospectPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealLocation",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedPlanetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "s", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "snarkConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradePlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawArtifact",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSilver",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldRadius",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADMIN_CAN_ADD_PLANETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET4_RADIUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WORLD_RADIUS_LOCKED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetWorldRadius",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToPlanetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToVoyageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLocationRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTarget4RadiusConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRevealProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactPointValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeRarities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNRevealedPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArrival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetLevelThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefreshedPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planetIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetLevelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetsExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prospectPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snarkConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSilver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldRadius",
    data: BytesLike
  ): Result;

  events: {
    "AdminPlanetCreated(uint256)": EventFragment;
    "ArrivalQueued(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ArtifactActivated(address,uint256,uint256)": EventFragment;
    "ArtifactDeactivated(address,uint256,uint256)": EventFragment;
    "ArtifactDeposited(address,uint256,uint256)": EventFragment;
    "ArtifactFound(address,uint256,uint256)": EventFragment;
    "ArtifactWithdrawn(address,uint256,uint256)": EventFragment;
    "LocationRevealed(address,uint256,uint256,uint256)": EventFragment;
    "PlanetHatBought(address,uint256,uint256)": EventFragment;
    "PlanetProspected(address,uint256)": EventFragment;
    "PlanetSilverWithdrawn(address,uint256,uint256)": EventFragment;
    "PlanetTransferred(address,uint256,address)": EventFragment;
    "PlanetUpgraded(address,uint256,uint256,uint256)": EventFragment;
    "PlayerInitialized(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminPlanetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArrivalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactFound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocationRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetHatBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetProspected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetSilverWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerInitialized"): EventFragment;
}

export type AdminPlanetCreatedEvent = TypedEvent<
  [BigNumber] & { loc: BigNumber }
>;

export type ArrivalQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    player: string;
    arrivalId: BigNumber;
    from: BigNumber;
    to: BigNumber;
    artifactId: BigNumber;
  }
>;

export type ArtifactActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactDeactivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactFoundEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type LocationRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    revealer: string;
    loc: BigNumber;
    x: BigNumber;
    y: BigNumber;
  }
>;

export type PlanetHatBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    tohatLevel: BigNumber;
  }
>;

export type PlanetProspectedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type PlanetSilverWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    amount: BigNumber;
  }
>;

export type PlanetTransferredEvent = TypedEvent<
  [string, BigNumber, string] & {
    sender: string;
    loc: BigNumber;
    receiver: string;
  }
>;

export type PlanetUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    branch: BigNumber;
    toBranchLevel: BigNumber;
  }
>;

export type PlayerInitializedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export class DarkForestCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DarkForestCoreInterface;

  functions: {
    ADMIN_CAN_ADD_PLANETS(overrides?: CallOverrides): Promise<[boolean]>;

    TARGET4_RADIUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    WORLD_RADIUS_LOCKED(overrides?: CallOverrides): Promise<[boolean]>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTarget4RadiusConstant(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
        ] & {
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_RARITY: BigNumber;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        }
      ]
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        })[]
      ]
    >;

    getNPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        }
      ]
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    getRevealCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ]
        ]
      ]
    >;

    initialize(
      _adminAddress: string,
      _whitelistAddress: string,
      _tokensAddress: string,
      initArgs: {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumberish;
        TOKEN_MINT_END_TIMESTAMP: BigNumberish;
        TARGET4_RADIUS: BigNumberish;
        INITIAL_WORLD_RADIUS: BigNumberish;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumberish;
        SPACETYPE_KEY: BigNumberish;
        BIOMEBASE_KEY: BigNumberish;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumberish;
        MAX_NATURAL_PLANET_LEVEL: BigNumberish;
        TIME_FACTOR_HUNDREDTHS: BigNumberish;
        PERLIN_THRESHOLD_1: BigNumberish;
        PERLIN_THRESHOLD_2: BigNumberish;
        PERLIN_THRESHOLD_3: BigNumberish;
        INIT_PERLIN_MIN: BigNumberish;
        INIT_PERLIN_MAX: BigNumberish;
        SPAWN_RIM_AREA: BigNumberish;
        BIOME_THRESHOLD_1: BigNumberish;
        BIOME_THRESHOLD_2: BigNumberish;
        PLANET_RARITY: BigNumberish;
        PLANET_TYPE_WEIGHTS: [
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        }
      ]
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        })[]
      ]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    planetLevelsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        }
      ]
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
        }
      ]
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
        }
      ]
    >;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
        ] & {
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_RARITY: BigNumber;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        adminAddress: string;
        whitelist: string;
        tokens: string;
        paused: boolean;
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        TARGET4_RADIUS: BigNumber;
        snarkConstants: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        };
        gameConstants: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
        ] & {
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_RARITY: BigNumber;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        };
        planetLevelsCount: BigNumber;
        worldRadius: BigNumber;
        planetEventsCount: BigNumber;
      }
    >;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        }
      ]
    >;

    transferOwnership(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    worldRadius(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ADMIN_CAN_ADD_PLANETS(overrides?: CallOverrides): Promise<boolean>;

  TARGET4_RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  WORLD_RADIUS_LOCKED(overrides?: CallOverrides): Promise<boolean>;

  activateArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    wormholeTo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  adminSetWorldRadius(
    _newRadius: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  artifactIdToPlanetId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  artifactIdToVoyageId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyHat(
    _location: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLocationRevealCooldown(
    newCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTarget4RadiusConstant(
    _newConstant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRevealProof(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  createPlanet(
    args: {
      location: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateArtifact(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findArtifact(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ],
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    ] & {
      MAX_NATURAL_PLANET_LEVEL: BigNumber;
      TIME_FACTOR_HUNDREDTHS: BigNumber;
      PERLIN_THRESHOLD_1: BigNumber;
      PERLIN_THRESHOLD_2: BigNumber;
      PERLIN_THRESHOLD_3: BigNumber;
      INIT_PERLIN_MIN: BigNumber;
      INIT_PERLIN_MAX: BigNumber;
      SPAWN_RIM_AREA: BigNumber;
      BIOME_THRESHOLD_1: BigNumber;
      BIOME_THRESHOLD_2: BigNumber;
      PLANET_RARITY: BigNumber;
      PHOTOID_ACTIVATION_DELAY: BigNumber;
      LOCATION_REVEAL_COOLDOWN: BigNumber;
      PLANET_TYPE_WEIGHTS: [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ];
      ARTIFACT_POINT_VALUES: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }
  >;

  getArtifactPointValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDefaultStats(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    })[]
  >;

  getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getPlanetArrival(
    arrivalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  getPlanetEvent(
    locationId: BigNumberish,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    }
  >;

  getPlanetEventsCount(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRefreshedPlanet(
    location: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ] & {
      eventsToRemove: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      artifactsToAdd: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }
  >;

  getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  getRevealedCoords(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  getTypeWeights(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ]
    ]
  >;

  getUpgrades(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    ]
  >;

  initialize(
    _adminAddress: string,
    _whitelistAddress: string,
    _tokensAddress: string,
    initArgs: {
      ADMIN_CAN_ADD_PLANETS: boolean;
      WORLD_RADIUS_LOCKED: boolean;
      LOCATION_REVEAL_COOLDOWN: BigNumberish;
      TOKEN_MINT_END_TIMESTAMP: BigNumberish;
      TARGET4_RADIUS: BigNumberish;
      INITIAL_WORLD_RADIUS: BigNumberish;
      DISABLE_ZK_CHECKS: boolean;
      PLANETHASH_KEY: BigNumberish;
      SPACETYPE_KEY: BigNumberish;
      BIOMEBASE_KEY: BigNumberish;
      PERLIN_MIRROR_X: boolean;
      PERLIN_MIRROR_Y: boolean;
      PERLIN_LENGTH_SCALE: BigNumberish;
      MAX_NATURAL_PLANET_LEVEL: BigNumberish;
      TIME_FACTOR_HUNDREDTHS: BigNumberish;
      PERLIN_THRESHOLD_1: BigNumberish;
      PERLIN_THRESHOLD_2: BigNumberish;
      PERLIN_THRESHOLD_3: BigNumberish;
      INIT_PERLIN_MIN: BigNumberish;
      INIT_PERLIN_MAX: BigNumberish;
      SPAWN_RIM_AREA: BigNumberish;
      BIOME_THRESHOLD_1: BigNumberish;
      BIOME_THRESHOLD_2: BigNumberish;
      PLANET_RARITY: BigNumberish;
      PLANET_TYPE_WEIGHTS: [
        [
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ],
        [
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ],
        [
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ],
        [
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ],
          [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ]
      ];
      ARTIFACT_POINT_VALUES: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      PHOTOID_ACTIVATION_DELAY: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  move(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  planetArrivals(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  planetArtifacts(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  planetDefaultStats(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    }
  >;

  planetEvents(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    })[]
  >;

  planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planets(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    }
  >;

  planetsExtendedInfo(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
    }
  >;

  playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  players(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isInitialized: boolean;
      player: string;
      initTimestamp: BigNumber;
      homePlanetId: BigNumber;
      lastRevealTimestamp: BigNumber;
      score: BigNumber;
    }
  >;

  prospectPlanet(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refreshPlanet(
    location: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealLocation(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealedCoords(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  revealedPlanetIds(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
      ] & {
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_RARITY: BigNumber;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      adminAddress: string;
      whitelist: string;
      tokens: string;
      paused: boolean;
      ADMIN_CAN_ADD_PLANETS: boolean;
      WORLD_RADIUS_LOCKED: boolean;
      TOKEN_MINT_END_TIMESTAMP: BigNumber;
      TARGET4_RADIUS: BigNumber;
      snarkConstants: [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      };
      gameConstants: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
      ] & {
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_RARITY: BigNumber;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      };
      planetLevelsCount: BigNumber;
      worldRadius: BigNumber;
      planetEventsCount: BigNumber;
    }
  >;

  setOwner(
    planetId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintEndTime(
    newTokenMintEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snarkConstants(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      DISABLE_ZK_CHECKS: boolean;
      PLANETHASH_KEY: BigNumber;
      SPACETYPE_KEY: BigNumber;
      BIOMEBASE_KEY: BigNumber;
      PERLIN_MIRROR_X: boolean;
      PERLIN_MIRROR_Y: boolean;
      PERLIN_LENGTH_SCALE: BigNumber;
    }
  >;

  transferOwnership(
    _location: BigNumberish,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePlanet(
    _location: BigNumberish,
    _branch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSilver(
    locationId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  worldRadius(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ADMIN_CAN_ADD_PLANETS(overrides?: CallOverrides): Promise<boolean>;

    TARGET4_RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    WORLD_RADIUS_LOCKED(overrides?: CallOverrides): Promise<boolean>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyHat(_location: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTarget4RadiusConstant(
      _newConstant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    gameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
      ] & {
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_RARITY: BigNumber;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      })[]
    >;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      }
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ]
      ]
    >;

    initialize(
      _adminAddress: string,
      _whitelistAddress: string,
      _tokensAddress: string,
      initArgs: {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumberish;
        TOKEN_MINT_END_TIMESTAMP: BigNumberish;
        TARGET4_RADIUS: BigNumberish;
        INITIAL_WORLD_RADIUS: BigNumberish;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumberish;
        SPACETYPE_KEY: BigNumberish;
        BIOMEBASE_KEY: BigNumberish;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumberish;
        MAX_NATURAL_PLANET_LEVEL: BigNumberish;
        TIME_FACTOR_HUNDREDTHS: BigNumberish;
        PERLIN_THRESHOLD_1: BigNumberish;
        PERLIN_THRESHOLD_2: BigNumberish;
        PERLIN_THRESHOLD_3: BigNumberish;
        INIT_PERLIN_MIN: BigNumberish;
        INIT_PERLIN_MAX: BigNumberish;
        SPAWN_RIM_AREA: BigNumberish;
        BIOME_THRESHOLD_1: BigNumberish;
        BIOME_THRESHOLD_2: BigNumberish;
        PLANET_RARITY: BigNumberish;
        PLANET_TYPE_WEIGHTS: [
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      }
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      })[]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      }
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
      }
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isInitialized: boolean;
        player: string;
        initTimestamp: BigNumber;
        homePlanetId: BigNumber;
        lastRevealTimestamp: BigNumber;
        score: BigNumber;
      }
    >;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
        ] & {
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_RARITY: BigNumber;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        adminAddress: string;
        whitelist: string;
        tokens: string;
        paused: boolean;
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        TARGET4_RADIUS: BigNumber;
        snarkConstants: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        };
        gameConstants: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
        ] & {
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_RARITY: BigNumber;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        };
        planetLevelsCount: BigNumber;
        worldRadius: BigNumber;
        planetEventsCount: BigNumber;
      }
    >;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    snarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      }
    >;

    transferOwnership(
      _location: BigNumberish,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AdminPlanetCreated(uint256)"(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    AdminPlanetCreated(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    "ArrivalQueued(address,uint256,uint256,uint256,uint256)"(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
      }
    >;

    ArrivalQueued(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
      }
    >;

    "ArtifactActivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactActivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactDeactivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactDeactivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactDeposited(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactDeposited(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactFound(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactFound(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactWithdrawn(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactWithdrawn(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "LocationRevealed(address,uint256,uint256,uint256)"(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    LocationRevealed(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    "PlanetHatBought(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    PlanetHatBought(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    "PlanetProspected(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlanetProspected(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "PlanetSilverWithdrawn(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    PlanetSilverWithdrawn(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    "PlanetTransferred(address,uint256,address)"(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    PlanetTransferred(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    "PlanetUpgraded(address,uint256,uint256,uint256)"(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    PlanetUpgraded(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    "PlayerInitialized(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlayerInitialized(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;
  };

  estimateGas: {
    ADMIN_CAN_ADD_PLANETS(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET4_RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    WORLD_RADIUS_LOCKED(overrides?: CallOverrides): Promise<BigNumber>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTarget4RadiusConstant(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getArtifactPointValues(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultStats(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypeWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgrades(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _adminAddress: string,
      _whitelistAddress: string,
      _tokensAddress: string,
      initArgs: {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumberish;
        TOKEN_MINT_END_TIMESTAMP: BigNumberish;
        TARGET4_RADIUS: BigNumberish;
        INITIAL_WORLD_RADIUS: BigNumberish;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumberish;
        SPACETYPE_KEY: BigNumberish;
        BIOMEBASE_KEY: BigNumberish;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumberish;
        MAX_NATURAL_PLANET_LEVEL: BigNumberish;
        TIME_FACTOR_HUNDREDTHS: BigNumberish;
        PERLIN_THRESHOLD_1: BigNumberish;
        PERLIN_THRESHOLD_2: BigNumberish;
        PERLIN_THRESHOLD_3: BigNumberish;
        INIT_PERLIN_MIN: BigNumberish;
        INIT_PERLIN_MAX: BigNumberish;
        SPAWN_RIM_AREA: BigNumberish;
        BIOME_THRESHOLD_1: BigNumberish;
        BIOME_THRESHOLD_2: BigNumberish;
        PLANET_RARITY: BigNumberish;
        PLANET_TYPE_WEIGHTS: [
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    players(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snarkConstants(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_CAN_ADD_PLANETS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TARGET4_RADIUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_MINT_END_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WORLD_RADIUS_LOCKED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTarget4RadiusConstant(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeRarities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlanets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNRevealedPlanets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetLevelThresholds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevealCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypeWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpgrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _adminAddress: string,
      _whitelistAddress: string,
      _tokensAddress: string,
      initArgs: {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumberish;
        TOKEN_MINT_END_TIMESTAMP: BigNumberish;
        TARGET4_RADIUS: BigNumberish;
        INITIAL_WORLD_RADIUS: BigNumberish;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumberish;
        SPACETYPE_KEY: BigNumberish;
        BIOMEBASE_KEY: BigNumberish;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumberish;
        MAX_NATURAL_PLANET_LEVEL: BigNumberish;
        TIME_FACTOR_HUNDREDTHS: BigNumberish;
        PERLIN_THRESHOLD_1: BigNumberish;
        PERLIN_THRESHOLD_2: BigNumberish;
        PERLIN_THRESHOLD_3: BigNumberish;
        INIT_PERLIN_MIN: BigNumberish;
        INIT_PERLIN_MAX: BigNumberish;
        SPAWN_RIM_AREA: BigNumberish;
        BIOME_THRESHOLD_1: BigNumberish;
        BIOME_THRESHOLD_2: BigNumberish;
        PLANET_RARITY: BigNumberish;
        PLANET_TYPE_WEIGHTS: [
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ],
          [
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ],
            [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ]
          ]
        ];
        ARTIFACT_POINT_VALUES: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEventsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetLevelsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snarkConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    worldRadius(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
