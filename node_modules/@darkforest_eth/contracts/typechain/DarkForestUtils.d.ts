/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ethers,
  PopulatedTransaction,
  Signer,
} from "ethers";
import type { TypedEvent, TypedEventFilter, TypedListener } from "./common";

interface DarkForestUtilsInterface extends ethers.utils.Interface {
  functions: {
    "_calculateByteUInt(bytes,uint256,uint256)": FunctionFragment;
    "_getBiome(uint8,uint256)": FunctionFragment;
    "_getPlanetLevelTypeAndSpaceType(uint256,uint256)": FunctionFragment;
    "_getRadius()": FunctionFragment;
    "_getUpgradeForArtifact(tuple)": FunctionFragment;
    "_locationIdValid(uint256)": FunctionFragment;
    "artifactRarityFromPlanetLevel(uint256)": FunctionFragment;
    "checkPlanetDOS(uint256)": FunctionFragment;
    "defaultUpgrade()": FunctionFragment;
    "getActiveArtifact(uint256)": FunctionFragment;
    "getPlanetArtifact(uint256,uint256)": FunctionFragment;
    "isActivated(tuple)": FunctionFragment;
    "revertIfBadSnarkPerlinFlags(uint256[5],bool)": FunctionFragment;
    "spaceTypeFromPerlin(uint256)": FunctionFragment;
    "timeDelayUpgrade(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_calculateByteUInt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBiome",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPlanetLevelTypeAndSpaceType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getRadius",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getUpgradeForArtifact",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_locationIdValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artifactRarityFromPlanetLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPlanetDOS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveArtifact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArtifact",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfBadSnarkPerlinFlags",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spaceTypeFromPerlin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeDelayUpgrade",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_calculateByteUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getBiome", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getPlanetLevelTypeAndSpaceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getRadius", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getUpgradeForArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_locationIdValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactRarityFromPlanetLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPlanetDOS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfBadSnarkPerlinFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spaceTypeFromPerlin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeDelayUpgrade",
    data: BytesLike
  ): Result;

  events: {};
}

export class DarkForestUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DarkForestUtilsInterface;

  functions: {
    _calculateByteUInt(
      _b: BytesLike,
      _startByte: BigNumberish,
      _endByte: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _byteUInt: BigNumber }>;

    _getBiome(
      spaceType: BigNumberish,
      biomebase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    _getPlanetLevelTypeAndSpaceType(
      _location: BigNumberish,
      _perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, number]>;

    _getRadius(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getUpgradeForArtifact(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    >;

    _locationIdValid(
      _loc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    artifactRarityFromPlanetLevel(
      planetLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    checkPlanetDOS(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    defaultUpgrade(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    >;

    getActiveArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
        }
      ]
    >;

    getPlanetArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
        }
      ]
    >;

    isActivated(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revertIfBadSnarkPerlinFlags(
      perlinFlags: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      checkingBiome: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    spaceTypeFromPerlin(
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    timeDelayUpgrade(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    >;
  };

  _calculateByteUInt(
    _b: BytesLike,
    _startByte: BigNumberish,
    _endByte: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBiome(
    spaceType: BigNumberish,
    biomebase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  _getPlanetLevelTypeAndSpaceType(
    _location: BigNumberish,
    _perlin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, number]>;

  _getRadius(overrides?: CallOverrides): Promise<BigNumber>;

  _getUpgradeForArtifact(
    artifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      popCapMultiplier: BigNumber;
      popGroMultiplier: BigNumber;
      rangeMultiplier: BigNumber;
      speedMultiplier: BigNumber;
      defMultiplier: BigNumber;
    }
  >;

  _locationIdValid(
    _loc: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  artifactRarityFromPlanetLevel(
    planetLevel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  checkPlanetDOS(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  defaultUpgrade(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      popCapMultiplier: BigNumber;
      popGroMultiplier: BigNumber;
      rangeMultiplier: BigNumber;
      speedMultiplier: BigNumber;
      defMultiplier: BigNumber;
    }
  >;

  getActiveArtifact(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isInitialized: boolean;
      id: BigNumber;
      planetDiscoveredOn: BigNumber;
      rarity: number;
      planetBiome: number;
      mintedAtTimestamp: BigNumber;
      discoverer: string;
      artifactType: number;
      lastActivated: BigNumber;
      lastDeactivated: BigNumber;
      wormholeTo: BigNumber;
    }
  >;

  getPlanetArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isInitialized: boolean;
      id: BigNumber;
      planetDiscoveredOn: BigNumber;
      rarity: number;
      planetBiome: number;
      mintedAtTimestamp: BigNumber;
      discoverer: string;
      artifactType: number;
      lastActivated: BigNumber;
      lastDeactivated: BigNumber;
      wormholeTo: BigNumber;
    }
  >;

  isActivated(
    artifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  revertIfBadSnarkPerlinFlags(
    perlinFlags: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    checkingBiome: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  spaceTypeFromPerlin(
    perlin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  timeDelayUpgrade(
    artifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      popCapMultiplier: BigNumber;
      popGroMultiplier: BigNumber;
      rangeMultiplier: BigNumber;
      speedMultiplier: BigNumber;
      defMultiplier: BigNumber;
    }
  >;

  callStatic: {
    _calculateByteUInt(
      _b: BytesLike,
      _startByte: BigNumberish,
      _endByte: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBiome(
      spaceType: BigNumberish,
      biomebase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    _getPlanetLevelTypeAndSpaceType(
      _location: BigNumberish,
      _perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, number]>;

    _getRadius(overrides?: CallOverrides): Promise<BigNumber>;

    _getUpgradeForArtifact(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      }
    >;

    _locationIdValid(
      _loc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    artifactRarityFromPlanetLevel(
      planetLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    checkPlanetDOS(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultUpgrade(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      }
    >;

    getActiveArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
      }
    >;

    getPlanetArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
      }
    >;

    isActivated(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    revertIfBadSnarkPerlinFlags(
      perlinFlags: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      checkingBiome: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spaceTypeFromPerlin(
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    timeDelayUpgrade(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _calculateByteUInt(
      _b: BytesLike,
      _startByte: BigNumberish,
      _endByte: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBiome(
      spaceType: BigNumberish,
      biomebase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPlanetLevelTypeAndSpaceType(
      _location: BigNumberish,
      _perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getRadius(overrides?: CallOverrides): Promise<BigNumber>;

    _getUpgradeForArtifact(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _locationIdValid(
      _loc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactRarityFromPlanetLevel(
      planetLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPlanetDOS(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActivated(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfBadSnarkPerlinFlags(
      perlinFlags: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      checkingBiome: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spaceTypeFromPerlin(
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeDelayUpgrade(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _calculateByteUInt(
      _b: BytesLike,
      _startByte: BigNumberish,
      _endByte: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBiome(
      spaceType: BigNumberish,
      biomebase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPlanetLevelTypeAndSpaceType(
      _location: BigNumberish,
      _perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getRadius(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getUpgradeForArtifact(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _locationIdValid(
      _loc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artifactRarityFromPlanetLevel(
      planetLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPlanetDOS(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActivated(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfBadSnarkPerlinFlags(
      perlinFlags: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      checkingBiome: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spaceTypeFromPerlin(
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeDelayUpgrade(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
