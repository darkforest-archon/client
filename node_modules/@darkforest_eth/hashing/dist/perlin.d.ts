import { Fraction } from './fractions/bigFraction.js';
/**
 * A object containing a pair of x,y coordinates.
 */
export interface IntegerVector {
    x: number;
    y: number;
}
interface Vector {
    x: Fraction;
    y: Fraction;
}
/**
 * Various configuration used for calculating perlin.
 * Always make sure these values match the contracts you are working with
 * or else your transactions **will** be reverted.
 */
export interface PerlinConfig {
    /**
     * The key being used for the perlin calculation. Will be `SPACETYPE_KEY` or `BIOMEBASE_KEY`.
     */
    key: number;
    /**
     * The `PERLIN_LENGTH_SCALE` being used to calculate perlin.
     */
    scale: number;
    /**
     * Whether the X coordinate is being mirrored in the perlin calculation.
     *
     * @default false
     */
    mirrorX: boolean;
    /**
     * Whether the Y coordinate is being mirrored in the perlin calculation.
     *
     * @default false
     */
    mirrorY: boolean;
    /**
     * If the resulting perlin should be "floored".
     *
     * @default false
     */
    floor: boolean;
}
declare type HashFn = (...inputs: number[]) => number;
export declare const rand: (key: number) => (...args: number[]) => number;
export declare const getRandomGradientAt: (point: Vector, scale: Fraction, randFn: HashFn) => Vector;
export declare const MAX_PERLIN_VALUE = 32;
/**
 * Calculates the perlin for a location, given the x,y pair and the PerlinConfig for the game.
 *
 * @param coords An object of the x,y coordinates for which perlin is being calculated.
 * @param options An object containing the configuration for the perlin algorithm.
 */
export declare function perlin(coords: IntegerVector, options: PerlinConfig): number;
export {};
