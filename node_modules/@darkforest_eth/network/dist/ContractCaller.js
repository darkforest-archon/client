"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCaller = void 0;
const constants_1 = require("@darkforest_eth/constants");
const p_retry_1 = __importDefault(require("p-retry"));
const ThrottledConcurrentQueue_1 = require("./ThrottledConcurrentQueue");
/**
 * Instead of allowing the game to call `view` functions on the blockchain directly, all contract
 * calls should go through this class. Its purpose is to throttle the calls to a reasonable rate,
 * and to gracefully handle errors and retries
 */
class ContractCaller {
    constructor(queue, maxRetries) {
        /**
         * Queue which stores future contract calls.
         */
        this.queue = new ThrottledConcurrentQueue_1.ThrottledConcurrentQueue({
            maxInvocationsPerIntervalMs: 10,
            invocationIntervalMs: 200,
            maxConcurrency: 20,
        });
        /**
         * The maximum amount of times that we want the game to retry any individual call. Retries are
         * appended to the end of the queue, meaning they respect the throttling settings of this class.
         */
        this.maxRetries = constants_1.DEFAULT_MAX_CALL_RETRIES;
        if (queue)
            this.queue = queue;
        if (maxRetries)
            this.maxRetries = maxRetries;
    }
    /**
     * Submits a call to the call queue. Each call is retried a maximum of
     * {@link ContractCaller.DEFAULT_MAX_CALL_RETRIES} times. Returns a promise that resolves if the call was
     * successful, and rejects if it failed even after all the retries.
     */
    async makeCall(contractViewFunction, args = []) {
        var _a;
        const result = (0, p_retry_1.default)(async () => {
            var _a, _b;
            const callPromise = this.queue.add(() => {
                var _a;
                (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
                    d.totalCalls++;
                });
                return contractViewFunction(...args);
            });
            (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
                d.callsInQueue = this.queue.size();
            });
            const callResult = await callPromise;
            (_b = this.diagnosticsUpdater) === null || _b === void 0 ? void 0 : _b.updateDiagnostics((d) => {
                d.callsInQueue = this.queue.size();
            });
            return callResult;
        }, { retries: this.maxRetries });
        (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
            d.totalCalls++;
        });
        return result;
    }
    /**
     * Sets the diagnostics updater to the one you provide. If you don't set this, everything apart
     * from diagnostics continues to function.
     */
    setDiagnosticUpdater(diagnosticUpdater) {
        this.diagnosticsUpdater = diagnosticUpdater;
    }
}
exports.ContractCaller = ContractCaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RDYWxsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ29udHJhY3RDYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseURBQXFFO0FBR3JFLHNEQUE0QjtBQUM1Qix5RUFBNkU7QUFFN0U7Ozs7R0FJRztBQUNILE1BQWEsY0FBYztJQXFCekIsWUFBbUIsS0FBYSxFQUFFLFVBQW1CO1FBcEJyRDs7V0FFRztRQUNjLFVBQUssR0FBVSxJQUFJLG1EQUF3QixDQUFDO1lBQzNELDJCQUEyQixFQUFFLEVBQUU7WUFDL0Isb0JBQW9CLEVBQUUsR0FBRztZQUN6QixjQUFjLEVBQUUsRUFBRTtTQUNuQixDQUFDLENBQUM7UUFFSDs7O1dBR0c7UUFDSyxlQUFVLEdBQVcsb0NBQXdCLENBQUM7UUFRcEQsSUFBSSxLQUFLO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxVQUFVO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsUUFBUSxDQUNuQixvQkFBeUMsRUFDekMsT0FBa0IsRUFBRTs7UUFFcEIsTUFBTSxNQUFNLEdBQUcsSUFBQSxpQkFBSyxFQUNsQixLQUFLLElBQUksRUFBRTs7WUFDVCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7O2dCQUN0QyxNQUFBLElBQUksQ0FBQyxrQkFBa0IsMENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDL0MsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNqQixDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLG9CQUFvQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFBLElBQUksQ0FBQyxrQkFBa0IsMENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDL0MsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxVQUFVLEdBQUcsTUFBTSxXQUFXLENBQUM7WUFFckMsTUFBQSxJQUFJLENBQUMsa0JBQWtCLDBDQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9DLENBQUMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUMsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQzdCLENBQUM7UUFFRixNQUFBLElBQUksQ0FBQyxrQkFBa0IsMENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUMvQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksb0JBQW9CLENBQUMsaUJBQXFDO1FBQy9ELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7QUF6RUQsd0NBeUVDIn0=