"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxExecutor = void 0;
const p_defer_1 = __importDefault(require("p-defer"));
const p_timeout_1 = __importDefault(require("p-timeout"));
const Network_1 = require("./Network");
const ThrottledConcurrentQueue_1 = require("./ThrottledConcurrentQueue");
class TxExecutor {
    constructor(ethConnection, gasSettingProvider, beforeTransaction, afterTransaction, queueConfiguration) {
        /**
         * Unless overridden, these are the default transaction options each blockchain transaction will
         * be sent with.
         */
        this.defaultTxOptions = {
            gasLimit: 2000000,
        };
        /**
         * Executes the given queued transaction. This is a field rather than a method declaration on
         * purpose for `this` purposes.
         */
        this.execute = async (txRequest) => {
            var _a;
            let time_called = undefined;
            let error = undefined;
            let time_submitted = undefined;
            let time_confirmed = undefined;
            let time_errored = undefined;
            let tx_hash = undefined;
            const time_exec_called = Date.now();
            try {
                await this.maybeUpdateNonce();
                if (this.beforeTransaction) {
                    await this.beforeTransaction(txRequest);
                }
                const requestWithDefaults = Object.assign(JSON.parse(JSON.stringify(this.defaultTxOptions)), txRequest.overrides);
                time_called = Date.now();
                const submitted = await (0, p_timeout_1.default)(txRequest.contract[txRequest.methodName](...txRequest.args, {
                    ...requestWithDefaults,
                    nonce: this.nonce,
                }), TxExecutor.TX_SUBMIT_TIMEOUT, `tx request ${txRequest.actionId} failed to submit: timed out}`);
                time_submitted = Date.now();
                tx_hash = submitted.hash;
                if (this.nonce !== undefined) {
                    this.nonce += 1;
                }
                this.lastTransactionTimestamp = time_submitted;
                txRequest.onTransactionResponse(submitted);

                this.eth.waitForTransaction(submitted.hash).then((confirmed) => {
                    time_confirmed = Date.now();
                    txRequest.onTransactionReceipt(confirmed);
            
                    // if (confirmed.status !== 1) {
                    //     time_errored = time_confirmed;
                    //     throw new Error('transaction reverted');
                    // }
                }).catch(txRequest.onReceiptError);

                // const confirmed = await this.ethConnection.waitForTransaction(submitted.hash);
                // if (confirmed.status !== 1) {
                //     time_errored = Date.now();
                //     throw new Error('transaction reverted');
                // }
                // else {
                //     time_confirmed = Date.now();
                //     txRequest.onTransactionReceipt(confirmed);
                // }
            }
            catch (e) {
                console.error(e);
                error = e;
                if (!time_submitted) {
                    time_errored = Date.now();
                    txRequest.onSubmissionError(error);
                }
                else {
                    // Ran out of retries, set nonce to undefined to refresh it
                    if (!time_errored) {
                        this.nonce = undefined;
                        time_errored = Date.now();
                    }
                    txRequest.onReceiptError(error);
                }
            }
            finally {
                (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
                    d.totalTransactions++;
                });
            }
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            const logEvent = {
                tx_to: txRequest.contract.address,
                tx_type: txRequest.methodName,
                auto_gas_price_setting: txRequest.autoGasPriceSetting,
                time_exec_called,
                tx_hash,
            };
            if (time_called && time_submitted) {
                logEvent.wait_submit = time_submitted - time_called;
                if (time_confirmed) {
                    logEvent.wait_confirm = time_confirmed - time_called;
                }
            }
            if (error && time_errored) {
                logEvent.error = error.message || JSON.stringify(error);
                logEvent.wait_error = time_errored - time_exec_called;
                try {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    if (error.body) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        logEvent.parsed_error = String.fromCharCode.apply(null, error.body || []);
                    }
                }
                catch (e) { }
            }
            logEvent.rpc_endpoint = this.ethConnection.getRpcEndpoint();
            logEvent.user_address = this.ethConnection.getAddress();
            this.afterTransaction && this.afterTransaction(txRequest, logEvent);
        };
        this.queue = new ThrottledConcurrentQueue_1.ThrottledConcurrentQueue(queueConfiguration !== null && queueConfiguration !== void 0 ? queueConfiguration : {
            invocationIntervalMs: 200,
            maxInvocationsPerIntervalMs: 3,
            maxConcurrency: 1,
        });
        this.lastTransactionTimestamp = Date.now();
        this.ethConnection = ethConnection;
        this.gasSettingProvider = gasSettingProvider;
        this.beforeTransaction = beforeTransaction;
        this.afterTransaction = afterTransaction;
    }
    /**
     * Schedules this transaction for execution.
     */
    queueTransaction(actionId, contract, methodName, args, overrides = {
        gasPrice: undefined,
        gasLimit: 2000000,
    }) {
        var _a;
        (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
            d.transactionsInQueue++;
        });
        const { promise: submittedPromise, reject: rejectTxResponse, resolve: txResponse, } = (0, p_defer_1.default)();
        const { promise: receiptPromise, reject: rejectTxReceipt, resolve: txReceipt, } = (0, p_defer_1.default)();
        const txRequest = {
            methodName,
            actionId,
            contract,
            args,
            overrides,
            onSubmissionError: rejectTxResponse,
            onReceiptError: rejectTxReceipt,
            onTransactionResponse: txResponse,
            onTransactionReceipt: txReceipt,
        };
        const autoGasPriceSetting = this.gasSettingProvider(txRequest);
        txRequest.autoGasPriceSetting = autoGasPriceSetting;
        if (overrides.gasPrice === undefined) {
            txRequest.overrides.gasPrice = (0, Network_1.gweiToWei)(this.ethConnection.getAutoGasPriceGwei(this.ethConnection.getAutoGasPrices(), autoGasPriceSetting));
        }
        this.queue.add(() => {
            var _a;
            (_a = this.diagnosticsUpdater) === null || _a === void 0 ? void 0 : _a.updateDiagnostics((d) => {
                d.transactionsInQueue--;
            });
            return this.execute(txRequest);
        });
        return {
            submitted: submittedPromise,
            confirmed: receiptPromise,
        };
    }
    /**
     * If the nonce is probably stale, reload it from the blockchain.
     */
    async maybeUpdateNonce() {
        if (this.nonce === undefined ||
            Date.now() - this.lastTransactionTimestamp > TxExecutor.NONCE_STALE_AFTER_MS) {
            const newNonce = await this.ethConnection.getNonce();
            if (newNonce !== undefined)
                this.nonce = newNonce;
        }
    }
    setDiagnosticUpdater(diagnosticUpdater) {
        this.diagnosticsUpdater = diagnosticUpdater;
    }
}
exports.TxExecutor = TxExecutor;
/**
 * A transaction is considered to have errored if haven't successfully submitted to mempool within
 * this amount of time.
 */
TxExecutor.TX_SUBMIT_TIMEOUT = 30000;
/**
 * We refresh the nonce if it hasn't been updated in this amount of time.
 */
TxExecutor.NONCE_STALE_AFTER_MS = 5000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHhFeGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UeEV4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLHNEQUErQjtBQUMvQiwwREFBZ0M7QUFHaEMsdUNBQXNDO0FBQ3RDLHlFQUFzRTtBQWtHdEUsTUFBYSxVQUFVO0lBaUVyQixZQUNFLGFBQTRCLEVBQzVCLGtCQUEyQyxFQUMzQyxpQkFBcUMsRUFDckMsZ0JBQW1DLEVBQ25DLGtCQUFpRDtRQWJuRDs7O1dBR0c7UUFDSyxxQkFBZ0IsR0FBaUM7WUFDdkQsUUFBUSxFQUFFLE9BQVM7U0FDcEIsQ0FBQztRQXVHRjs7O1dBR0c7UUFDSyxZQUFPLEdBQUcsS0FBSyxFQUFFLFNBQTRCLEVBQUUsRUFBRTs7WUFDdkQsSUFBSSxXQUFXLEdBQXVCLFNBQVMsQ0FBQztZQUNoRCxJQUFJLEtBQUssR0FBc0IsU0FBUyxDQUFDO1lBQ3pDLElBQUksY0FBYyxHQUF1QixTQUFTLENBQUM7WUFDbkQsSUFBSSxjQUFjLEdBQXVCLFNBQVMsQ0FBQztZQUNuRCxJQUFJLFlBQVksR0FBdUIsU0FBUyxDQUFDO1lBQ2pELElBQUksT0FBTyxHQUF1QixTQUFTLENBQUM7WUFFNUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFcEMsSUFBSTtnQkFDRixNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUU5QixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtvQkFDMUIsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ3pDO2dCQUVELE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQ2pELFNBQVMsQ0FBQyxTQUFTLENBQ3BCLENBQUM7Z0JBRUYs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